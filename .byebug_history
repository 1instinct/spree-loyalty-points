c
@return_authorization.order.create_credit_transaction(@credit_points)
@return_authorization.order.should_receive(:create_credit_transaction).with(@credit_points)
c
@return_authorization.update_loyalty_points
return_authorization.update_loyalty_points
@return_authorization.order.create_credit_transaction(@credit_points)
@return_authorization.order.create_credit_transaction
@return_authorization.order.should_receive(:create_credit_transaction).with(@credit_points)
c
order.user.loyalty_points_balance
.loyalty_points_balance
order.user
current_user
@current_user
@user
order.create_credit_transaction(loyalty_points_credit_quantity)
loyalty_points
order.loyalty_points_for(order.total)
[order.loyalty_points_for(order.total), loyalty_points].min
c
flash
c
cc
c
 Spree::PaymentMethod.loyalty_points_id_included?(['1'])
 Spree::PaymentMethod.loyalty_points_id_included?([''1'])
params[:order][:payments_attributes].collect { |payment| payment["payment_method_id"] }
   32:         end
   31:           payment["payment_method_id"]
params[:order][:payments_attributes].collect do |payment|
@order.stub(:can_go_to_state?).and_return(false)
c
@order.can_go_to_state?
@order.stub(:can_go_to_state?).and_return(false)
c
@order.stub(:can_go_to_state?).and_return(false)
@order
params[:state]
prams[:state]
params[:state]
params
skip_state_validation?
@order.can_go_to_state?(params[:state])
params[:state]
c
n
 params[:order] && params[:order][:state_lock_version]
c
order.user.has_sufficient_loyalty_points?
c
order.user.has_sufficient_loyalty_points?
c
order.user.has_sufficient_loyalty_points?
c
Spree::PaymentMethod.loyalty_points_id_included?
c
order.user.has_sufficient_loyalty_points?
c
flash
c
order.user.has_sufficient_loyalty_points?
order
c
Spree::PaymentMethod.loyalty_points_id_included?
c
Spree::PaymentMethod.loyalty_points_id_included?
Spree::PaymentMethod.stub(:loyalty_points_id_included?).and_return(111)
Spree::PaymentMethod.stub(:loyalty_points_id_included?)
loyalty_points_payment_method.id
loyalty_points_payment_method
Spree::PaymentMethod.loyalty_points_id_included?(1)
c
 @loyalty_points_transactions(per_page: 10)
 @loyalty_points_transactions(per: 10)
c
@user.loyalty_points_transactions.for_order(order).includes(:source).order(updated_at: :desc)
@loyalty_points_transactions
@loyalty_points_transactions.to_json(only: [] )
@loyalty_points_transactions.to_json
c
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.instance_variable_get(:@if).any? { |p| p =~ /edit/ }
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.instance_variable_get(:@if) =~ /edit/
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.itself
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.instance_variable_get(:@kind)
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.instance_variable_get(:@filter)
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.instance_variable_get(:@key)
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.instance_variable_get(:@if)
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.instance_variables
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.instance_varibales
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.concern
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.raw_filter
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.filter
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.chain_config
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first.methods.sort
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }.first
Spree::Admin::GeneralSettingsController._process_action_callbacks.select{ |callback| callback.filter == :set_loyalty_points_settings }
Spree::Admin::GeneralSettingsController._process_action_callbacks

c
v
c
a.order.inventory_units.first.state
a.order.inventory_units.build(state: 'insda')
a.errors
a.valid?
a.save
b = _
a.order.inventory_units.first
a.order.inventory_units.first.valid?
a.order.inventory_units.valid?
a.order.inventory_units
a.order.inventory_units.shipped
a.order.nil?
a.order
a.errors
a.save
a
a.vaild
a.vaild?
a.order.inventory_units.first.state = 'shipped'
a.order.inventory_units.state = "shipped"
a.order.inventory_units.state = ""shipped
a.order.inventory_units
a.order.inventory_units.first.state
a.order.inventory_units.first
a.order.inventory_units.shipped
a.order.inventory_units.first.shipped
_.shipped
a.order.inventory_units.first
a.valid?
a.order.inventory_units.build
a.order.inventory_units = Spree::InventoryUnit.new
a.order.inventory_units = Spree:InventoryUnits.build
a.order.inventory_units = Spree:InventoryUnits.new
a.order.inventory_units.first
a.order.inventory_units
a.order.inventiry_units
a.order
a.order.inventory_units
a.order.inventory_units.shipped
order.inventory_units.shipped
a.order.nil?
a = build(:return_authorization_with_loyalty_points)
a = create(:return_authorization_with_loyalty_points)
a
a.errors.messages
a.order
a.order.attribute_names
a.errors
a.order.shipments.count
a.order.shipments
a.order.shipment
a.order
a
a.errors
a.valid?
a.number= 1
a.errors.messages
a = @a
@a.errors
@a.valid?
a.valid?
@a = build(:return_authorization_with_loyalty_points)
@a = create(:return_authorization_with_loyalty_points)
create(:return_authorization_with_loyalty_points)
